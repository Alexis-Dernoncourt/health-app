name: CI/CD Pipeline

on:
  push:
    tags:
      - 'v*.*.*-deploy' # Déclenchement lors du push d'un tag correspondant à un format de version

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          sparse-checkout: 'server'
          sparse-checkout-cone-mode: false

      - name: Move app files to root
        run: |
          ls -lah
          shopt -s dotglob
          mv server/* .
          rm -rf server
          ls -lah

      - name: Set environment variables
        run: |
          touch .env
          echo "TZ=${{ secrets.TZ }}" >> .env
          echo "PORT=${{ secrets.PORT }}" >> .env
          echo "HOST=${{ secrets.HOST }}" >> .env
          echo "LOG_LEVEL=${{ secrets.LOG_LEVEL }}" >> .env
          echo "APP_KEY=${{ secrets.APP_KEY }}" >> .env
          echo "NODE_ENV=${{ secrets.NODE_ENV }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_SSL=${{ secrets.DB_SSL }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> .env
          echo "DRIVE_DISK=${{ secrets.DRIVE_DISK }}" >> .env
          cat .env
          ls -a

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.16.0'

      - name: Build and Test
        run: |
          npm ci
          npm run build
          npm test

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          repository: 'Alexis-Dernoncourt/health-app'

      - name: SSH into Server and Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{secrets.SERVER_USERNAME}}
          key: ${{secrets.SSH_PRIVATE_KEY}}
          script: |
            # Se connecter au serveur
            cd /home/ubuntu/adonis-app || {
              echo "Dossier inexistant, clonage du dépôt"
              git clone https://github.com/Alexis-Dernoncourt/health-app.git /home/ubuntu/adonis-app
            }

            cd /home/ubuntu/adonis-app
            git pull origin master || {
              echo "Impossible de pull le code, tentative de reconnexion"
              exit 1
            }

            # Arrêter et supprimer les anciens conteneurs Docker
            cd server/
            docker-compose down || true

            # Recréer le fichier .env seulement si nécessaire
            if [ ! -f "/home/ubuntu/adonis-app/server/.env" ]; then
              echo "Création du fichier .env"
              touch .env
              echo "TZ=${{ secrets.TZ }}" >> .env
              echo "PORT=${{ secrets.PORT }}" >> .env
              echo "HOST=${{ secrets.HOST }}" >> .env
              echo "LOG_LEVEL=${{ secrets.LOG_LEVEL }}" >> .env
              echo "APP_KEY=${{ secrets.APP_KEY }}" >> .env
              echo "NODE_ENV=${{ secrets.NODE_ENV }}" >> .env
              echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
              echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
              echo "DB_USER=${{ secrets.DB_USER }}" >> .env
              echo "DB_SSL=${{ secrets.DB_SSL }}" >> .env
              echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
              echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> .env
              echo "DRIVE_DISK=${{ secrets.DRIVE_DISK }}" >> .env
            fi

            # Vérification du contenu de .env
            cat .env
            ls -a

            # Construire et lancer les services via Docker Compose
            docker-compose build || {
              echo "La construction Docker a échoué"
              exit 1
            }
            docker-compose up -d || {
              echo "Le démarrage des services Docker a échoué"
              exit 1
            }

            # Vérification de l'état des conteneurs Docker
            docker ps -a | grep app || {
              echo "Aucun conteneur app en cours d'exécution"
              exit 1
            }

            # Exécuter les migrations Adonis.js
            docker exec adonis_app node ace migration:run --force || {
              echo "Échec des migrations"
              exit 1
            }
